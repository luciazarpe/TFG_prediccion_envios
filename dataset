{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "315030c1-6bd9-442c-9eaa-76f56f39a0d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import unidecode"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "103fd62c-4301-4890-8424-4af014dea0bc",
   "metadata": {},
   "source": [
    "Exportamos todos los excels con los que vamos a trabajar\n",
    "\n",
    "Estimación_Entrada_en_Unidad_V1_NUEVAS_VARIABLES.xlsx\n",
    "\n",
    "Consulta_CP_por_Semanas_NUEVAS_VARIABLES.xlsx\n",
    "\n",
    "CODINE Calendario festivos locales.xlsx\n",
    "\n",
    "Estimación_Entrada_en_Unidad_V1_NUEVAS_VARIABLES 2022 2025.xlsx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "395233dd-eb75-4ff0-8c88-782eb837caa3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/lucia/Documents/anaconda3/lib/python3.12/site-packages/openpyxl/styles/stylesheet.py:237: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
      "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n"
     ]
    }
   ],
   "source": [
    "core = pd.read_excel('Estimación_Entrada_en_Unidad_V1_NUEVAS_VARIABLES.xlsx', header=3)\n",
    "consultacp = pd.read_excel('Consulta_CP_por_Semanas_NUEVAS_VARIABLES.xlsx', header=3)\n",
    "festivos_nacional_y_ccaa_madrid = pd.read_excel('CODINE Calendario festivos locales.xlsx')\n",
    "festivos_local_madrid = pd.read_excel('CODINE Calendario festivos locales.xlsx', sheet_name='Locales MAESTROU')\n",
    "crec_ant = pd.read_excel('Estimación_Entrada_en_Unidad_V1_NUEVAS_VARIABLES 2022 2025.xlsx', header=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fd9dd5a4-e68d-4875-8d41-2b3ef4020453",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Eliminamos la columna Unnamed:0 de los siguientes df porqeu sale de coger la primera columna del excel\n",
    "core = core.drop('Unnamed: 0', axis=1)\n",
    "consultacp = consultacp.drop('Unnamed: 0', axis=1)\n",
    "crec_ant = crec_ant.drop('Unnamed: 0', axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "487ae6df-e71c-48dd-9c4d-e69387844319",
   "metadata": {},
   "source": [
    "Ahora cambiamos los nombres de las variables para poder trabajar con ellas, ya que el archivo original contiene espacios y distintos formatos de titulos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5c52577c-bb83-442b-8d25-87cffa648419",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/nb/mmy0ln7n3w33lhzc3xlzr1zc0000gp/T/ipykernel_18103/3791904737.py:6: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  df = df.applymap(lambda x: unidecode.unidecode(x).lower() if isinstance(x, str) else x)\n",
      "/var/folders/nb/mmy0ln7n3w33lhzc3xlzr1zc0000gp/T/ipykernel_18103/3791904737.py:6: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  df = df.applymap(lambda x: unidecode.unidecode(x).lower() if isinstance(x, str) else x)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Codigo_Tipo_Unidad_Distribucion            object\n",
      "Codigo_Unidad_Distribucion                  int64\n",
      "Unidad_de_Distribucion                     object\n",
      "Codigo_Tipo_de_Grupo_de_Puesto             object\n",
      "Codigo_Grupo_de_Puesto                      int64\n",
      "Grupo_de_Puesto                            object\n",
      "Codigo_Provincia                            int64\n",
      "Provincia_(SIE_DT)                         object\n",
      "Fecha                              datetime64[ns]\n",
      "Puestos_SGIE                              float64\n",
      "Envios_Producidos                           int64\n",
      "Envios_distribucion_diaria                float64\n",
      "NORMALIZADA                               float64\n",
      "MANUAL                                    float64\n",
      "IMPRESOS_SIN_DIRECCION                    float64\n",
      "FLAT                                      float64\n",
      "Nacida_Ordinaria                            int64\n",
      "NacidaAcum                                  int64\n",
      "dtype: object\n",
      "Area_Territorial                 object\n",
      "Prov                            float64\n",
      "Codired                         float64\n",
      "Unidad                           object\n",
      "Fecha                            object\n",
      "Dia                              object\n",
      "Clasif_Normalizado              float64\n",
      "Ent_Normalizado                 float64\n",
      "%_Norm                          float64\n",
      "%_UNIDADES_ENTRE_90_Y_110%      float64\n",
      "Clasif_Flat                     float64\n",
      "Ent_Flat                        float64\n",
      "%_Flat                           object\n",
      "%_UNIDADES_ENTRE_90_Y_110%.1    float64\n",
      "Ent_Manual                      float64\n",
      "Ent_Impresos                    float64\n",
      "Clasif_IPC                      float64\n",
      "Ent_IPC                         float64\n",
      "%_IPC                            object\n",
      "%_UNIDADES_ENTRE_90_Y_110%.2     object\n",
      "dtype: object\n",
      "Tipo_Festivo            object\n",
      "Comunidad               object\n",
      "Fecha           datetime64[ns]\n",
      "dtype: object\n",
      "Codigo_Tipo_Unidad_Distribucion            object\n",
      "Codigo_Unidad_Distribucion                  int64\n",
      "Unidad_de_Distribucion                     object\n",
      "Codigo_Tipo_de_Grupo_de_Puesto             object\n",
      "Codigo_Grupo_de_Puesto                      int64\n",
      "Grupo_de_Puesto                            object\n",
      "Codigo_Provincia                            int64\n",
      "Provincia_(SIE_DT)                         object\n",
      "Fecha                              datetime64[ns]\n",
      "Puestos_SGIE                              float64\n",
      "Envios_Producidos                         float64\n",
      "Envios_distribucion_diaria                float64\n",
      "NORMALIZADA                               float64\n",
      "MANUAL                                    float64\n",
      "IMPRESOS_SIN_DIRECCION                    float64\n",
      "FLAT                                      float64\n",
      "Nacida_Ordinaria                            int64\n",
      "NacidaAcum                                  int64\n",
      "dtype: object\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/nb/mmy0ln7n3w33lhzc3xlzr1zc0000gp/T/ipykernel_18103/3791904737.py:6: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  df = df.applymap(lambda x: unidecode.unidecode(x).lower() if isinstance(x, str) else x)\n",
      "/var/folders/nb/mmy0ln7n3w33lhzc3xlzr1zc0000gp/T/ipykernel_18103/3791904737.py:6: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  df = df.applymap(lambda x: unidecode.unidecode(x).lower() if isinstance(x, str) else x)\n"
     ]
    }
   ],
   "source": [
    "def limpiar_df(df):\n",
    "    # Crteamos un diccionario para mapear los nombres de los antiguos a los que queremos crear, y luego cambiamos los nombres de las columnas\n",
    "    col_names = {col: unidecode.unidecode(col).replace(\" \", \"_\") for col in df.columns}\n",
    "    df.rename(columns=col_names, inplace=True)\n",
    "    #Transformamos todos los valores object a minuscula para que sea mas facil trabajar con el df  \n",
    "    df = df.applymap(lambda x: unidecode.unidecode(x).lower() if isinstance(x, str) else x)\n",
    "    return df\n",
    "\n",
    "# Aplico la función a los 4 DataFrames\n",
    "core = limpiar_df(core)\n",
    "consultacp = limpiar_df(consultacp)\n",
    "festivos_nacional_y_ccaa_madrid = limpiar_df(festivos_nacional_y_ccaa_madrid)\n",
    "festivos_local_madrid = limpiar_df(festivos_local_madrid)\n",
    "crec_ant = limpiar_df(crec_ant)\n",
    "print(core.dtypes)\n",
    "print(consultacp.dtypes)\n",
    "print(festivos_nacional_y_ccaa_madrid.dtypes)\n",
    "print(crec_ant.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8d4922f6-53b4-4877-afd1-5695faeab2ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "def pasar_float_a_int(df):\n",
    "    float_cols = df.select_dtypes(include='float64').columns\n",
    "    for col in float_cols:\n",
    "        df[col] = df[col].round().astype('Int64') \n",
    "    return df\n",
    "# Aplico la función a los 4 dfs\n",
    "\n",
    "core = pasar_float_a_int(core)\n",
    "consultacp = pasar_float_a_int(consultacp)\n",
    "festivos_nacional_y_ccaa_madrid = pasar_float_a_int(festivos_nacional_y_ccaa_madrid)\n",
    "crec_ant = pasar_float_a_int(crec_ant)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66936b28-2710-4030-854b-a722a6c87b0a",
   "metadata": {},
   "source": [
    "en los 3 dfs faltan fechas, asique tenemos que rellenar las fechas para hacer el cruce correctamente"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a6734ee4-0079-4446-a83a-ee21ae9c2363",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fechas(df):\n",
    "    df = df[df['Fecha'].astype(str).str.match(r'^\\d{4}-\\d{2}-\\d{2}')].copy()\n",
    "    df['Fecha'] = pd.to_datetime(df['Fecha'])\n",
    "    rango_fechas = pd.date_range(start=df['Fecha'].min(), end=df['Fecha'].max(), freq='D')\n",
    "    df_fechas = pd.DataFrame({'Fecha': rango_fechas})\n",
    "    df = df_fechas.merge(df, on='Fecha', how='left')\n",
    "    df['Día'] = df['Fecha'].dt.day_name(locale='es_ES.UTF-8')\n",
    "    df = pasar_float_a_int(df)\n",
    "    return df\n",
    "\n",
    "# Hemos completado el rango de fechas para tener registro de todos los días, ya que hemos visto que los fines de semana no aparecian en neustro archivo original\n",
    "core = fechas(core)\n",
    "consultacp = fechas(consultacp)\n",
    "crec_ant = fechas(crec_ant)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "37e86e81-8a4a-431c-8f90-6e6187e4c454",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fecha                              datetime64[ns]\n",
      "Codigo_Tipo_Unidad_Distribucion            object\n",
      "Codigo_Unidad_Distribucion                  Int64\n",
      "Unidad_de_Distribucion                     object\n",
      "Codigo_Tipo_de_Grupo_de_Puesto             object\n",
      "Codigo_Grupo_de_Puesto                      Int64\n",
      "Grupo_de_Puesto                            object\n",
      "Codigo_Provincia                            Int64\n",
      "Provincia_(SIE_DT)                         object\n",
      "Puestos_SGIE                                Int64\n",
      "Envios_Producidos                           Int64\n",
      "Envios_distribucion_diaria                  Int64\n",
      "NORMALIZADA                                 Int64\n",
      "MANUAL                                      Int64\n",
      "IMPRESOS_SIN_DIRECCION                      Int64\n",
      "FLAT                                        Int64\n",
      "Nacida_Ordinaria                            Int64\n",
      "NacidaAcum                                  Int64\n",
      "Día                                        object\n",
      "dtype: object\n",
      "Fecha                           datetime64[ns]\n",
      "Area_Territorial                        object\n",
      "Prov                                     Int64\n",
      "Codired                                  Int64\n",
      "Unidad                                  object\n",
      "Dia                                     object\n",
      "Clasif_Normalizado                       Int64\n",
      "Ent_Normalizado                          Int64\n",
      "%_Norm                                   Int64\n",
      "%_UNIDADES_ENTRE_90_Y_110%               Int64\n",
      "Clasif_Flat                              Int64\n",
      "Ent_Flat                                 Int64\n",
      "%_Flat                                  object\n",
      "%_UNIDADES_ENTRE_90_Y_110%.1             Int64\n",
      "Ent_Manual                               Int64\n",
      "Ent_Impresos                             Int64\n",
      "Clasif_IPC                               Int64\n",
      "Ent_IPC                                  Int64\n",
      "%_IPC                                   object\n",
      "%_UNIDADES_ENTRE_90_Y_110%.2            object\n",
      "Día                                     object\n",
      "dtype: object\n",
      "Tipo_Festivo            object\n",
      "Comunidad               object\n",
      "Fecha           datetime64[ns]\n",
      "dtype: object\n",
      "Fecha                              datetime64[ns]\n",
      "Codigo_Tipo_Unidad_Distribucion            object\n",
      "Codigo_Unidad_Distribucion                  Int64\n",
      "Unidad_de_Distribucion                     object\n",
      "Codigo_Tipo_de_Grupo_de_Puesto             object\n",
      "Codigo_Grupo_de_Puesto                      Int64\n",
      "Grupo_de_Puesto                            object\n",
      "Codigo_Provincia                            Int64\n",
      "Provincia_(SIE_DT)                         object\n",
      "Puestos_SGIE                                Int64\n",
      "Envios_Producidos                           Int64\n",
      "Envios_distribucion_diaria                  Int64\n",
      "NORMALIZADA                                 Int64\n",
      "MANUAL                                      Int64\n",
      "IMPRESOS_SIN_DIRECCION                      Int64\n",
      "FLAT                                        Int64\n",
      "Nacida_Ordinaria                            Int64\n",
      "NacidaAcum                                  Int64\n",
      "Día                                        object\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(core.dtypes)\n",
    "print(consultacp.dtypes)\n",
    "print(festivos_nacional_y_ccaa_madrid.dtypes)\n",
    "print(crec_ant.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "38bb453a-ba50-4740-8a50-a2143ff5a110",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fecha</th>\n",
       "      <th>Area_Territorial</th>\n",
       "      <th>Prov</th>\n",
       "      <th>Codired</th>\n",
       "      <th>Unidad</th>\n",
       "      <th>Dia</th>\n",
       "      <th>Clasif_Normalizado</th>\n",
       "      <th>Ent_Normalizado</th>\n",
       "      <th>%_Norm</th>\n",
       "      <th>%_UNIDADES_ENTRE_90_Y_110%</th>\n",
       "      <th>...</th>\n",
       "      <th>Ent_Flat</th>\n",
       "      <th>%_Flat</th>\n",
       "      <th>%_UNIDADES_ENTRE_90_Y_110%.1</th>\n",
       "      <th>Ent_Manual</th>\n",
       "      <th>Ent_Impresos</th>\n",
       "      <th>Clasif_IPC</th>\n",
       "      <th>Ent_IPC</th>\n",
       "      <th>%_IPC</th>\n",
       "      <th>%_UNIDADES_ENTRE_90_Y_110%.2</th>\n",
       "      <th>Día</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023-10-01</td>\n",
       "      <td>01-noroeste</td>\n",
       "      <td>5</td>\n",
       "      <td>503096</td>\n",
       "      <td>unidad de reparto 1</td>\n",
       "      <td>domingo</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>...</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>NaN</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Domingo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2023-10-01</td>\n",
       "      <td>01-noroeste</td>\n",
       "      <td>5</td>\n",
       "      <td>516194</td>\n",
       "      <td>avila cpr</td>\n",
       "      <td>domingo</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>...</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>NaN</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Domingo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2023-10-01</td>\n",
       "      <td>01-noroeste</td>\n",
       "      <td>5</td>\n",
       "      <td>516894</td>\n",
       "      <td>ud arevalo</td>\n",
       "      <td>domingo</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>...</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>NaN</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Domingo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023-10-01</td>\n",
       "      <td>01-noroeste</td>\n",
       "      <td>5</td>\n",
       "      <td>516994</td>\n",
       "      <td>ud arenas de san pedro</td>\n",
       "      <td>domingo</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>...</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>NaN</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Domingo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023-10-01</td>\n",
       "      <td>01-noroeste</td>\n",
       "      <td>5</td>\n",
       "      <td>517094</td>\n",
       "      <td>ud sotillo de la adrada</td>\n",
       "      <td>domingo</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>...</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>NaN</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Domingo</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Fecha Area_Territorial  Prov  Codired                   Unidad  \\\n",
       "0 2023-10-01      01-noroeste     5   503096      unidad de reparto 1   \n",
       "1 2023-10-01      01-noroeste     5   516194                avila cpr   \n",
       "2 2023-10-01      01-noroeste     5   516894               ud arevalo   \n",
       "3 2023-10-01      01-noroeste     5   516994   ud arenas de san pedro   \n",
       "4 2023-10-01      01-noroeste     5   517094  ud sotillo de la adrada   \n",
       "\n",
       "       Dia  Clasif_Normalizado  Ent_Normalizado  %_Norm  \\\n",
       "0  domingo                <NA>             <NA>    <NA>   \n",
       "1  domingo                <NA>             <NA>    <NA>   \n",
       "2  domingo                <NA>             <NA>    <NA>   \n",
       "3  domingo                <NA>             <NA>    <NA>   \n",
       "4  domingo                <NA>             <NA>    <NA>   \n",
       "\n",
       "   %_UNIDADES_ENTRE_90_Y_110%  ...  Ent_Flat  %_Flat  \\\n",
       "0                        <NA>  ...      <NA>     NaN   \n",
       "1                        <NA>  ...      <NA>     NaN   \n",
       "2                        <NA>  ...      <NA>     NaN   \n",
       "3                        <NA>  ...      <NA>     NaN   \n",
       "4                        <NA>  ...      <NA>     NaN   \n",
       "\n",
       "  %_UNIDADES_ENTRE_90_Y_110%.1  Ent_Manual  Ent_Impresos  Clasif_IPC  Ent_IPC  \\\n",
       "0                         <NA>        <NA>          <NA>        <NA>     <NA>   \n",
       "1                         <NA>        <NA>          <NA>        <NA>     <NA>   \n",
       "2                         <NA>        <NA>          <NA>        <NA>     <NA>   \n",
       "3                         <NA>        <NA>          <NA>        <NA>     <NA>   \n",
       "4                         <NA>        <NA>          <NA>        <NA>     <NA>   \n",
       "\n",
       "   %_IPC %_UNIDADES_ENTRE_90_Y_110%.2      Día  \n",
       "0    NaN                          NaN  Domingo  \n",
       "1    NaN                          NaN  Domingo  \n",
       "2    NaN                          NaN  Domingo  \n",
       "3    NaN                          NaN  Domingo  \n",
       "4    NaN                          NaN  Domingo  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "consultacp.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f91e4100-b184-496c-b2bc-77a5d0fb50e8",
   "metadata": {},
   "source": [
    "Vamos a eliminar las columnas que no vamos a utilizar en los df, ya que tenemos muchas variables extraidas de los informes pero que no tienen relación con la variable que estamos considerando, que es la de NORMALIZADA. Flat, manual e impresos sin direccion son otro tipo de envíos, pero estamos tratando de modelar la normalizada, que son en esencia las cartas que todos conocemos. Otras vairables como la provincia, área, codigo de puesto o puestos de SGIE son datos propios de la unidad o el número de trabajadores que asistieron, pero no tienen que ver con los envios de tipo normalizado. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "342ce934-775e-431a-bd9d-82a7fc061d83",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Fecha Unidad_de_Distribucion  NORMALIZADA  Nacida_Ordinaria\n",
      "0 2023-10-01   unidad de reparto 11         <NA>                71\n",
      "1 2023-10-02   unidad de reparto 11         2040           1899885\n",
      "2 2023-10-03   unidad de reparto 11         2380           2754258\n",
      "3 2023-10-04   unidad de reparto 11         3400           2667561\n",
      "4 2023-10-05   unidad de reparto 11         4760           2416479\n"
     ]
    }
   ],
   "source": [
    "columnas_guard = ['Fecha','Unidad_de_Distribucion', 'NORMALIZADA', 'Nacida_Ordinaria']\n",
    "core = core[columnas_guard]\n",
    "print(core.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86bee37e-9038-40cf-b818-63e8ee958f1e",
   "metadata": {},
   "source": [
    "VEMOS que al rellenar el rango de fechas, se han generado registros en los que neuestra variable objetivo tiene registros sin valor. Esto se debe a que a que hemos ampliado el rango de fechas pero no teníamos el número de envíos para ese dia. Tras consultar a la unidad, hemos corroborado que esos días son sábado o domigno y que no se trabaja, por lo que podemos rellenarlos con un 0. Tambien vamos a hacer ya el filtro para quedarnos solamente con los datos de la unidad en la que nos centraremos. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "12d94fc0-60a2-4574-bd8e-7ca054fd395b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fecha</th>\n",
       "      <th>Area_Territorial</th>\n",
       "      <th>Prov</th>\n",
       "      <th>Codired</th>\n",
       "      <th>Unidad</th>\n",
       "      <th>Dia</th>\n",
       "      <th>Clasif_Normalizado</th>\n",
       "      <th>Ent_Normalizado</th>\n",
       "      <th>%_Norm</th>\n",
       "      <th>%_UNIDADES_ENTRE_90_Y_110%</th>\n",
       "      <th>...</th>\n",
       "      <th>Ent_Flat</th>\n",
       "      <th>%_Flat</th>\n",
       "      <th>%_UNIDADES_ENTRE_90_Y_110%.1</th>\n",
       "      <th>Ent_Manual</th>\n",
       "      <th>Ent_Impresos</th>\n",
       "      <th>Clasif_IPC</th>\n",
       "      <th>Ent_IPC</th>\n",
       "      <th>%_IPC</th>\n",
       "      <th>%_UNIDADES_ENTRE_90_Y_110%.2</th>\n",
       "      <th>Día</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1048</th>\n",
       "      <td>2023-10-01</td>\n",
       "      <td>04-centro</td>\n",
       "      <td>28</td>\n",
       "      <td>2832796</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>domingo</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>...</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>NaN</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Domingo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2863</th>\n",
       "      <td>2023-10-02</td>\n",
       "      <td>04-centro</td>\n",
       "      <td>28</td>\n",
       "      <td>2832796</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>lunes</td>\n",
       "      <td>2023</td>\n",
       "      <td>2040</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1040</td>\n",
       "      <td>6.227545</td>\n",
       "      <td>6</td>\n",
       "      <td>960</td>\n",
       "      <td>0</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Lunes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4690</th>\n",
       "      <td>2023-10-03</td>\n",
       "      <td>04-centro</td>\n",
       "      <td>28</td>\n",
       "      <td>2832796</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>martes</td>\n",
       "      <td>2285</td>\n",
       "      <td>2380</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>480</td>\n",
       "      <td>0.935673</td>\n",
       "      <td>1</td>\n",
       "      <td>560</td>\n",
       "      <td>0</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Martes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6517</th>\n",
       "      <td>2023-10-04</td>\n",
       "      <td>04-centro</td>\n",
       "      <td>28</td>\n",
       "      <td>2832796</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>miercoles</td>\n",
       "      <td>3533</td>\n",
       "      <td>3400</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1200</td>\n",
       "      <td>0.931677</td>\n",
       "      <td>1</td>\n",
       "      <td>640</td>\n",
       "      <td>0</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Miércoles</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8343</th>\n",
       "      <td>2023-10-05</td>\n",
       "      <td>04-centro</td>\n",
       "      <td>28</td>\n",
       "      <td>2832796</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>jueves</td>\n",
       "      <td>4824</td>\n",
       "      <td>4760</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>720</td>\n",
       "      <td>1.100917</td>\n",
       "      <td>1</td>\n",
       "      <td>480</td>\n",
       "      <td>0</td>\n",
       "      <td>&lt;NA&gt;</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Jueves</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Fecha Area_Territorial  Prov  Codired                Unidad  \\\n",
       "1048 2023-10-01        04-centro    28  2832796  unidad de reparto 11   \n",
       "2863 2023-10-02        04-centro    28  2832796  unidad de reparto 11   \n",
       "4690 2023-10-03        04-centro    28  2832796  unidad de reparto 11   \n",
       "6517 2023-10-04        04-centro    28  2832796  unidad de reparto 11   \n",
       "8343 2023-10-05        04-centro    28  2832796  unidad de reparto 11   \n",
       "\n",
       "            Dia  Clasif_Normalizado  Ent_Normalizado  %_Norm  \\\n",
       "1048    domingo                <NA>             <NA>    <NA>   \n",
       "2863      lunes                2023             2040       1   \n",
       "4690     martes                2285             2380       1   \n",
       "6517  miercoles                3533             3400       1   \n",
       "8343     jueves                4824             4760       1   \n",
       "\n",
       "      %_UNIDADES_ENTRE_90_Y_110%  ...  Ent_Flat    %_Flat  \\\n",
       "1048                        <NA>  ...      <NA>       NaN   \n",
       "2863                           1  ...      1040  6.227545   \n",
       "4690                           1  ...       480  0.935673   \n",
       "6517                           1  ...      1200  0.931677   \n",
       "8343                           1  ...       720  1.100917   \n",
       "\n",
       "     %_UNIDADES_ENTRE_90_Y_110%.1  Ent_Manual  Ent_Impresos  Clasif_IPC  \\\n",
       "1048                         <NA>        <NA>          <NA>        <NA>   \n",
       "2863                            6         960             0        <NA>   \n",
       "4690                            1         560             0        <NA>   \n",
       "6517                            1         640             0        <NA>   \n",
       "8343                            1         480             0        <NA>   \n",
       "\n",
       "      Ent_IPC  %_IPC %_UNIDADES_ENTRE_90_Y_110%.2        Día  \n",
       "1048     <NA>    NaN                          NaN    Domingo  \n",
       "2863        0    NaN                          NaN      Lunes  \n",
       "4690        0    NaN                          NaN     Martes  \n",
       "6517        0    NaN                          NaN  Miércoles  \n",
       "8343        0    NaN                          NaN     Jueves  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "core = core.fillna(0)\n",
    "UR11 = consultacp[(consultacp['Unidad'] == 'unidad de reparto 11') &\n",
    "                  (consultacp['Area_Territorial'] == '04-centro')]\n",
    "\n",
    "UR11.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1fa51e61-fbe9-4544-a2db-0ec9964b8f65",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 578 entries, 1048 to 1012823\n",
      "Data columns (total 21 columns):\n",
      " #   Column                        Non-Null Count  Dtype         \n",
      "---  ------                        --------------  -----         \n",
      " 0   Fecha                         578 non-null    datetime64[ns]\n",
      " 1   Area_Territorial              578 non-null    object        \n",
      " 2   Prov                          578 non-null    Int64         \n",
      " 3   Codired                       578 non-null    Int64         \n",
      " 4   Unidad                        578 non-null    object        \n",
      " 5   Dia                           578 non-null    object        \n",
      " 6   Clasif_Normalizado            397 non-null    Int64         \n",
      " 7   Ent_Normalizado               390 non-null    Int64         \n",
      " 8   %_Norm                        389 non-null    Int64         \n",
      " 9   %_UNIDADES_ENTRE_90_Y_110%    389 non-null    Int64         \n",
      " 10  Clasif_Flat                   413 non-null    Int64         \n",
      " 11  Ent_Flat                      390 non-null    Int64         \n",
      " 12  %_Flat                        390 non-null    object        \n",
      " 13  %_UNIDADES_ENTRE_90_Y_110%.1  390 non-null    Int64         \n",
      " 14  Ent_Manual                    390 non-null    Int64         \n",
      " 15  Ent_Impresos                  390 non-null    Int64         \n",
      " 16  Clasif_IPC                    0 non-null      Int64         \n",
      " 17  Ent_IPC                       390 non-null    Int64         \n",
      " 18  %_IPC                         0 non-null      object        \n",
      " 19  %_UNIDADES_ENTRE_90_Y_110%.2  0 non-null      object        \n",
      " 20  Día                           578 non-null    object        \n",
      "dtypes: Int64(13), datetime64[ns](1), object(7)\n",
      "memory usage: 106.7+ KB\n"
     ]
    }
   ],
   "source": [
    "UR11.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fcca06a9-36e9-47fe-8095-f971beb2f3ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "columnas_a_conservar = ['Fecha', 'Unidad', 'Codired','Dia', 'Clasif_Normalizado']\n",
    "UR11 = UR11[columnas_a_conservar]\n",
    "UR11 = UR11.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "23ae8f45-ce84-4c72-a522-b4cd00fc0eb0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Vamos a asegurarnos que tenemos los mismos formatos en las tablas para proder cruzarlas\n",
    "UR11['Fecha'] = pd.to_datetime(UR11['Fecha'])\n",
    "core['Fecha'] = pd.to_datetime(core['Fecha'])\n",
    "UR11['Unidad'] = UR11['Unidad'].str.lower().str.strip()\n",
    "core['Unidad_de_Distribucion'] = core['Unidad_de_Distribucion'].str.lower().str.strip()\n",
    "df = UR11.merge(\n",
    "    core,\n",
    "    left_on=['Fecha', 'Unidad'],\n",
    "    right_on=['Fecha', 'Unidad_de_Distribucion'],\n",
    "    how='left',\n",
    "    suffixes=('_UR11', '_CORE')\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "11105e70-e68f-4747-91c8-5024c4ff3552",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fecha</th>\n",
       "      <th>Unidad</th>\n",
       "      <th>Codired</th>\n",
       "      <th>Dia</th>\n",
       "      <th>Clasif_Normalizado</th>\n",
       "      <th>Unidad_de_Distribucion</th>\n",
       "      <th>NORMALIZADA</th>\n",
       "      <th>Nacida_Ordinaria</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023-10-01</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2832796</td>\n",
       "      <td>domingo</td>\n",
       "      <td>0</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>0</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2023-10-02</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2832796</td>\n",
       "      <td>lunes</td>\n",
       "      <td>2023</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2040</td>\n",
       "      <td>1899885</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2023-10-03</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2832796</td>\n",
       "      <td>martes</td>\n",
       "      <td>2285</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2380</td>\n",
       "      <td>2754258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023-10-04</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2832796</td>\n",
       "      <td>miercoles</td>\n",
       "      <td>3533</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>3400</td>\n",
       "      <td>2667561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023-10-05</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2832796</td>\n",
       "      <td>jueves</td>\n",
       "      <td>4824</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>4760</td>\n",
       "      <td>2416479</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Fecha                Unidad  Codired        Dia  Clasif_Normalizado  \\\n",
       "0 2023-10-01  unidad de reparto 11  2832796    domingo                   0   \n",
       "1 2023-10-02  unidad de reparto 11  2832796      lunes                2023   \n",
       "2 2023-10-03  unidad de reparto 11  2832796     martes                2285   \n",
       "3 2023-10-04  unidad de reparto 11  2832796  miercoles                3533   \n",
       "4 2023-10-05  unidad de reparto 11  2832796     jueves                4824   \n",
       "\n",
       "  Unidad_de_Distribucion  NORMALIZADA  Nacida_Ordinaria  \n",
       "0   unidad de reparto 11            0                71  \n",
       "1   unidad de reparto 11         2040           1899885  \n",
       "2   unidad de reparto 11         2380           2754258  \n",
       "3   unidad de reparto 11         3400           2667561  \n",
       "4   unidad de reparto 11         4760           2416479  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "da956030-6080-4913-a975-9b037dbe25e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(columns='Unidad_de_Distribucion', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cd61cff-68b5-4799-9772-7275ba548a51",
   "metadata": {},
   "source": [
    "Por último, utilizaremos un Excel en el que se han recogido todos los festivos tanto nacionales como autonomicos y locales para poder crear una variable en la que recojamos si es festivo o no en la unidad. Además, de cara a aplicar el análisis a unidades distintas, considero que sería interesante incluir si es festivo o no en el centro de clasificacion que trabaja los envíos dirigidos a la unidad. Sin embargo, en este caso concretamente no es necesario ya que se clasifican en un centro situado en la misma localidad, por lo qeu los festivos coinciden. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "1d9388ba-3f9e-447e-b578-2e64638e78e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Tipo_Festivo</th>\n",
       "      <th>Comunidad</th>\n",
       "      <th>Fecha</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>festivo nacional</td>\n",
       "      <td>todas</td>\n",
       "      <td>2020-01-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>festivo nacional</td>\n",
       "      <td>todas</td>\n",
       "      <td>2020-01-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>festivo nacional</td>\n",
       "      <td>todas</td>\n",
       "      <td>2020-04-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>festivo nacional</td>\n",
       "      <td>todas</td>\n",
       "      <td>2020-05-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>festivo autonomico</td>\n",
       "      <td>comunidad de madrid</td>\n",
       "      <td>2020-04-09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Tipo_Festivo            Comunidad      Fecha\n",
       "0     festivo nacional                todas 2020-01-01\n",
       "25    festivo nacional                todas 2020-01-06\n",
       "26    festivo nacional                todas 2020-04-10\n",
       "38    festivo nacional                todas 2020-05-01\n",
       "44  festivo autonomico  comunidad de madrid 2020-04-09"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "festivos_nacional_y_ccaa_madrid = festivos_nacional_y_ccaa_madrid[\n",
    "    festivos_nacional_y_ccaa_madrid['Comunidad'].isin(['comunidad de madrid', 'todas'])\n",
    "]\n",
    "\n",
    "festivos_nacional_y_ccaa_madrid.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "fea88294-7202-4406-a145-de01ce351f8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Eliminamos los duplicados en la fecha \n",
    "festivos_nacional_y_ccaa_madrid = festivos_nacional_y_ccaa_madrid.drop_duplicates(subset='Fecha')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "47be5e31-1869-4d65-883e-857c96cc001d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Codine</th>\n",
       "      <th>Nombre_Provincia</th>\n",
       "      <th>Nombre_Municipio</th>\n",
       "      <th>CodIris</th>\n",
       "      <th>Nombre_Localidad</th>\n",
       "      <th>Fecha_Festivo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>28079</td>\n",
       "      <td>madrid</td>\n",
       "      <td>madrid</td>\n",
       "      <td>2807900000000</td>\n",
       "      <td>madrid</td>\n",
       "      <td>2021-11-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2977</th>\n",
       "      <td>28079</td>\n",
       "      <td>madrid</td>\n",
       "      <td>madrid</td>\n",
       "      <td>2807900000000</td>\n",
       "      <td>madrid</td>\n",
       "      <td>2021-05-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4210</th>\n",
       "      <td>28079</td>\n",
       "      <td>madrid</td>\n",
       "      <td>madrid</td>\n",
       "      <td>2807900000000</td>\n",
       "      <td>madrid</td>\n",
       "      <td>2022-11-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6822</th>\n",
       "      <td>28079</td>\n",
       "      <td>madrid</td>\n",
       "      <td>madrid</td>\n",
       "      <td>2807900000000</td>\n",
       "      <td>madrid</td>\n",
       "      <td>2022-05-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9759</th>\n",
       "      <td>28079</td>\n",
       "      <td>madrid</td>\n",
       "      <td>madrid</td>\n",
       "      <td>2807900000000</td>\n",
       "      <td>madrid</td>\n",
       "      <td>2023-05-15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Codine Nombre_Provincia Nombre_Municipio        CodIris  \\\n",
       "195    28079           madrid           madrid  2807900000000   \n",
       "2977   28079           madrid           madrid  2807900000000   \n",
       "4210   28079           madrid           madrid  2807900000000   \n",
       "6822   28079           madrid           madrid  2807900000000   \n",
       "9759   28079           madrid           madrid  2807900000000   \n",
       "\n",
       "     Nombre_Localidad Fecha_Festivo  \n",
       "195            madrid    2021-11-09  \n",
       "2977           madrid    2021-05-15  \n",
       "4210           madrid    2022-11-09  \n",
       "6822           madrid    2022-05-16  \n",
       "9759           madrid    2023-05-15  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Nos quedamos con los festivos locales solo los de esta unidad, que coge los de madrid\n",
    "festivos_local_madrid = festivos_local_madrid[festivos_local_madrid['Nombre_Localidad'].isin(['madrid'])]\n",
    "festivos_local_madrid = festivos_local_madrid.drop_duplicates(subset='Fecha_Festivo')\n",
    "festivos_local_madrid.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "2715793d-74af-443a-8f6f-fab837f712ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Tipo_Festivo</th>\n",
       "      <th>Comunidad</th>\n",
       "      <th>Fecha</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>festivo nacional</td>\n",
       "      <td>todas</td>\n",
       "      <td>2020-01-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>festivo nacional</td>\n",
       "      <td>todas</td>\n",
       "      <td>2020-01-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>festivo nacional</td>\n",
       "      <td>todas</td>\n",
       "      <td>2020-04-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>festivo nacional</td>\n",
       "      <td>todas</td>\n",
       "      <td>2020-05-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>festivo autonomico</td>\n",
       "      <td>comunidad de madrid</td>\n",
       "      <td>2020-04-09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Tipo_Festivo            Comunidad      Fecha\n",
       "0    festivo nacional                todas 2020-01-01\n",
       "1    festivo nacional                todas 2020-01-06\n",
       "2    festivo nacional                todas 2020-04-10\n",
       "3    festivo nacional                todas 2020-05-01\n",
       "4  festivo autonomico  comunidad de madrid 2020-04-09"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# CReamos una copia de nuestro df original y le agregamos otras variables que peudan enriquecer el análisis.\n",
    "festivos_local_mod = festivos_local_madrid.copy()\n",
    "festivos_local_mod['Tipo_Festivo'] = 'festivo local'\n",
    "festivos_local_mod = festivos_local_mod.rename(columns={\n",
    "    'Nombre_Localidad': 'Comunidad',\n",
    "    'Fecha_Festivo': 'Fecha'\n",
    "})\n",
    "eliminar = ['Codine', 'Nombre_Provincia', 'Nombre_Municipio', 'CodIris']\n",
    "festivos_local_mod = festivos_local_mod.drop(columns=eliminar)\n",
    "festivos_local_madrid_mod = festivos_local_mod[['Tipo_Festivo', 'Comunidad', 'Fecha']]\n",
    "festivos_nacional_y_ccaa_madrid = festivos_nacional_y_ccaa_madrid[['Tipo_Festivo', 'Comunidad', 'Fecha']]\n",
    "\n",
    "# junto los festivos nacionales y autonomicos con los locales\n",
    "festivos_madrid_todos = pd.concat([festivos_nacional_y_ccaa_madrid, festivos_local_mod], ignore_index=True)\n",
    "\n",
    "festivos_madrid_todos.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "0411fa75-1a24-4ed6-8a24-7f55b7ef12dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/lucia/Documents/anaconda3/lib/python3.12/site-packages/openpyxl/styles/stylesheet.py:237: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
      "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n",
      "/Users/lucia/Documents/anaconda3/lib/python3.12/site-packages/openpyxl/styles/stylesheet.py:237: UserWarning: Workbook contains no default style, apply openpyxl's default\n",
      "  warn(\"Workbook contains no default style, apply openpyxl's default\")\n"
     ]
    }
   ],
   "source": [
    "festivos_madrid_todos['Fecha'] = pd.to_datetime(festivos_madrid_todos['Fecha'])\n",
    "df['Fecha'] = pd.to_datetime(df['Fecha'])\n",
    "# agregamos la columna que indicará si es festivo (1) o si no lo es (0) en la unidad\n",
    "df['Es_Festivo'] = df['Fecha'].isin(festivos_madrid_todos['Fecha']).astype(int)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "festivos_madrid_todos['Fecha'] = pd.to_datetime(festivos_madrid_todos['Fecha'])\n",
    "df['Fecha'] = pd.to_datetime(df['Fecha'])\n",
    "# agregamos la columna que indicará si es festivo (1) o si no lo es (0) en la unidad\n",
    "df['Es_Festivo'] = df['Fecha'].isin(festivos_madrid_todos['Fecha']).astype(int)\n",
    "\n",
    "\n",
    "\n",
    "cp = pd.read_excel('consultacp.xlsx', header=3)\n",
    "entrada = pd.read_excel('entrada.xlsx', header=3)\n",
    "cp1=cp.copy()\n",
    "en1=entrada.copy()\n",
    "cp1 = fechas(cp1)\n",
    "en1 = fechas(en1)\n",
    "cp1 = cp1.drop('Unnamed: 0', axis = 1)\n",
    "en1 = en1.drop('Unnamed: 0', axis = 1)\n",
    "cp1 = cp1[(cp1['Unidad'] == 'UNIDAD DE REPARTO 11') & (cp1['Área Territorial'] == '04-CENTRO')]\n",
    "cp1['Unidad'] = cp1['Unidad'].str.lower().str.strip()\n",
    "en1['Unidad de Distribución'] = en1['Unidad de Distribución'].str.lower().str.strip()\n",
    "dfforecast = cp1.merge(\n",
    "    en1,\n",
    "    left_on=['Fecha', 'Unidad'],\n",
    "    right_on=['Fecha', 'Unidad de Distribución'],\n",
    "    how='left',\n",
    "    suffixes=('_UR11', '_CORE')\n",
    ")\n",
    "dfforecast = dfforecast[['Fecha', 'Clasif Normalizado','NORMALIZADA', 'Nacida Ordinaria']]\n",
    "dfforecast['Fecha'] = pd.to_datetime(dfforecast['Fecha'])\n",
    "dfforecast['Es_Finde'] = dfforecast['Fecha'].dt.dayofweek.isin([5, 6]).astype(int)\n",
    "dfforecast['Es_Festivo'] = dfforecast['Fecha'].isin(festivos_madrid_todos['Fecha']).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "a893f3e9-5184-48a5-b801-5ea7d8472ca0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fecha</th>\n",
       "      <th>Unidad</th>\n",
       "      <th>Codired</th>\n",
       "      <th>Dia</th>\n",
       "      <th>Clasif_Normalizado</th>\n",
       "      <th>NORMALIZADA</th>\n",
       "      <th>Nacida_Ordinaria</th>\n",
       "      <th>Es_Festivo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023-10-01</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2832796</td>\n",
       "      <td>domingo</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>71</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2023-10-02</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2832796</td>\n",
       "      <td>lunes</td>\n",
       "      <td>2023</td>\n",
       "      <td>2040</td>\n",
       "      <td>1899885</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2023-10-03</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2832796</td>\n",
       "      <td>martes</td>\n",
       "      <td>2285</td>\n",
       "      <td>2380</td>\n",
       "      <td>2754258</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023-10-04</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2832796</td>\n",
       "      <td>miercoles</td>\n",
       "      <td>3533</td>\n",
       "      <td>3400</td>\n",
       "      <td>2667561</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023-10-05</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2832796</td>\n",
       "      <td>jueves</td>\n",
       "      <td>4824</td>\n",
       "      <td>4760</td>\n",
       "      <td>2416479</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Fecha                Unidad  Codired        Dia  Clasif_Normalizado  \\\n",
       "0 2023-10-01  unidad de reparto 11  2832796    domingo                   0   \n",
       "1 2023-10-02  unidad de reparto 11  2832796      lunes                2023   \n",
       "2 2023-10-03  unidad de reparto 11  2832796     martes                2285   \n",
       "3 2023-10-04  unidad de reparto 11  2832796  miercoles                3533   \n",
       "4 2023-10-05  unidad de reparto 11  2832796     jueves                4824   \n",
       "\n",
       "   NORMALIZADA  Nacida_Ordinaria  Es_Festivo  \n",
       "0            0                71           0  \n",
       "1         2040           1899885           0  \n",
       "2         2380           2754258           0  \n",
       "3         3400           2667561           0  \n",
       "4         4760           2416479           0  "
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "87965f7e-deb5-4254-a41d-ac6a0787c2ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Fecha</th>\n",
       "      <th>Unidad</th>\n",
       "      <th>Codired</th>\n",
       "      <th>Dia</th>\n",
       "      <th>Clasif_Normalizado</th>\n",
       "      <th>NORMALIZADA</th>\n",
       "      <th>Nacida_Ordinaria</th>\n",
       "      <th>Es_Festivo</th>\n",
       "      <th>Es_finde</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023-10-01</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2832796</td>\n",
       "      <td>domingo</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>71</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2023-10-02</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2832796</td>\n",
       "      <td>lunes</td>\n",
       "      <td>2023</td>\n",
       "      <td>2040</td>\n",
       "      <td>1899885</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2023-10-03</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2832796</td>\n",
       "      <td>martes</td>\n",
       "      <td>2285</td>\n",
       "      <td>2380</td>\n",
       "      <td>2754258</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023-10-04</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2832796</td>\n",
       "      <td>miercoles</td>\n",
       "      <td>3533</td>\n",
       "      <td>3400</td>\n",
       "      <td>2667561</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023-10-05</td>\n",
       "      <td>unidad de reparto 11</td>\n",
       "      <td>2832796</td>\n",
       "      <td>jueves</td>\n",
       "      <td>4824</td>\n",
       "      <td>4760</td>\n",
       "      <td>2416479</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Fecha                Unidad  Codired        Dia  Clasif_Normalizado  \\\n",
       "0 2023-10-01  unidad de reparto 11  2832796    domingo                   0   \n",
       "1 2023-10-02  unidad de reparto 11  2832796      lunes                2023   \n",
       "2 2023-10-03  unidad de reparto 11  2832796     martes                2285   \n",
       "3 2023-10-04  unidad de reparto 11  2832796  miercoles                3533   \n",
       "4 2023-10-05  unidad de reparto 11  2832796     jueves                4824   \n",
       "\n",
       "   NORMALIZADA  Nacida_Ordinaria  Es_Festivo  Es_finde  \n",
       "0            0                71           0         1  \n",
       "1         2040           1899885           0         0  \n",
       "2         2380           2754258           0         0  \n",
       "3         3400           2667561           0         0  \n",
       "4         4760           2416479           0         0  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TAMBIEN indicamos con un 1 si es un fin de semana, que no es laborable, o un 0 si es un día entre semana\n",
    "df['Es_finde'] = df['Dia'].str.lower().isin(['sábado', 'sabado', 'domingo']).astype(int) \n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "278c3e4b-b735-490c-898d-3fb467ddc87a",
   "metadata": {},
   "source": [
    "la variable Nacida_ordinaria representa el número de envios que se admitieron en todo el país ese día. Considero que podría tener relevancia, pero lo comprobremos después. De igual modo, hemos introducido una variable que añada ese mismo dato pero del año anterior, cogiendo no ese mismo día sino que forzaremos qeu coincida el día de la semana. Por ejemplo, si el 23 de octurbe de 2023 era domingo, lo cruzaremos con el día del año anteiror que se correponda, que será tambien domingo para mantener la estructura de los festivos. Realizaremos un tratamiento similar del df que con el anterior, por lo que no nos detendremos en los detalles. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "823ffe79-b142-4416-962f-c4e797dca5f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/nb/mmy0ln7n3w33lhzc3xlzr1zc0000gp/T/ipykernel_18103/1451579228.py:12: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n",
      "  df = df.applymap(lambda x: unidecode.unidecode(x).lower() if isinstance(x, str) else x)\n"
     ]
    }
   ],
   "source": [
    "crec_ant = crec_ant[crec_ant['Fecha'].astype(str).str.match(r'^\\d{4}-\\d{2}-\\d{2}')].copy()\n",
    "crec_ant['Fecha'] = pd.to_datetime(crec_ant['Fecha'])\n",
    "fechas = pd.date_range(start=crec_ant['Fecha'].min(), end=crec_ant['Fecha'].max(), freq='D')\n",
    "df_fechas = pd.DataFrame({'Fecha': fechas})\n",
    "crec_ant = df_fechas.merge(crec_ant, on='Fecha', how='left')\n",
    "crec_ant['Día'] = crec_ant['Fecha'].dt.day_name(locale='es_ES.UTF-8')\n",
    "fechas_faltantes = df_fechas[~df_fechas['Fecha'].isin(crec_ant['Fecha'])]\n",
    "\n",
    "def limpiar_df_crec_ant(df):\n",
    "    col_names = {col: unidecode.unidecode(col).replace(\" \", \"_\").lower() for col in df.columns}\n",
    "    df.rename(columns=col_names, inplace=True)\n",
    "    df = df.applymap(lambda x: unidecode.unidecode(x).lower() if isinstance(x, str) else x)\n",
    "    posibles_dia_cols = [col for col in df.columns if 'dia' in col]\n",
    "    for col in posibles_dia_cols:\n",
    "        df[col] = df[col].apply(lambda x: unidecode.unidecode(x).lower() if isinstance(x, str) else x)\n",
    "\n",
    "    return df\n",
    "\n",
    "crec_ant = limpiar_df_crec_ant(crec_ant)\n",
    "\n",
    "festivos_nacional_y_ccaa_madrid['Fecha'] = pd.to_datetime(festivos_nacional_y_ccaa_madrid['Fecha'])\n",
    "crec_ant['fecha'] = pd.to_datetime(crec_ant['fecha'])\n",
    "crec_ant['Es_Festivo'] = crec_ant['fecha'].isin(festivos_nacional_y_ccaa_madrid['Fecha']).astype(int)\n",
    "crec_ant['unidad_de_distribucion'] = crec_ant['unidad_de_distribucion'].fillna('unidad de reparto 11')\n",
    "crec_ant['normalizada'] = crec_ant['normalizada'].fillna(0).astype('Int64')\n",
    "crec_ant['nacida_ordinaria'] = crec_ant['nacida_ordinaria'].fillna(0).astype('Int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "292c8b23-2dd1-4af0-8d34-0d4cdb93d08d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Ahora buscamos el día del año anteiror que corresponda. Uniremos festivos con festivos. inicialmente ponemos todo a cero y vamos rellenando cada una\n",
    "crec_ant['dia_semana'] = crec_ant['fecha'].dt.day_name(locale='es_ES.UTF-8').apply(lambda x: unidecode.unidecode(x).lower())\n",
    "aux = crec_ant.set_index('fecha')\n",
    "crec_ant['normalizada_semana_anterior'] = 0\n",
    "crec_ant['nacida_ordinaria_semana_anterior'] = 0\n",
    "crec_ant['es_festivo_semana_anterior'] = 0\n",
    "crec_ant['es_finde_semana_anterior'] = 0\n",
    "\n",
    "crec_ant['normalizada_ano_anterior'] = 0\n",
    "crec_ant['nacida_ordinaria_ano_anterior'] = 0\n",
    "crec_ant['es_festivo_ano_anterior'] = 0\n",
    "crec_ant['es_finde_ano_anterior'] = 0\n",
    "\n",
    "for i, j in crec_ant.iterrows():\n",
    "    fecha = j['fecha']\n",
    "    dia_semana = j['dia_semana']\n",
    "\n",
    "    ### SEMANA ANTERIOR ###\n",
    "    fecha_semana_ant = fecha - pd.Timedelta(days=7)\n",
    "    if fecha_semana_ant in aux.index:\n",
    "        datos_sem_ant = aux.loc[fecha_semana_ant]\n",
    "        crec_ant.at[i, 'normalizada_semana_anterior'] = datos_sem_ant['normalizada']\n",
    "        crec_ant.at[i, 'nacida_ordinaria_semana_anterior'] = datos_sem_ant['nacida_ordinaria']\n",
    "        crec_ant.at[i, 'es_festivo_semana_anterior'] = datos_sem_ant['Es_Festivo']\n",
    "        dia_semana_ant = datos_sem_ant['dia_semana']\n",
    "        if dia_semana_ant in ['sabado', 'domingo']:\n",
    "            crec_ant.at[i, 'es_finde_semana_anterior'] = 1\n",
    "        else:\n",
    "            crec_ant.at[i, 'es_finde_semana_anterior'] = 0\n",
    "\n",
    "    ### AÑO ANTERIOR ###\n",
    "    semana = fecha.isocalendar().week\n",
    "    año_anterior = fecha.year - 1\n",
    "\n",
    "    posibles_fechas = crec_ant[\n",
    "        (crec_ant['fecha'].dt.isocalendar().week == semana) &\n",
    "        (crec_ant['fecha'].dt.year == año_anterior) &\n",
    "        (crec_ant['dia_semana'] == dia_semana)\n",
    "    ]\n",
    "    if not posibles_fechas.empty:\n",
    "        datos_ano_ant = posibles_fechas.iloc[0]\n",
    "        crec_ant.at[i, 'normalizada_ano_anterior'] = datos_ano_ant['normalizada']\n",
    "        crec_ant.at[i, 'nacida_ordinaria_ano_anterior'] = datos_ano_ant['nacida_ordinaria']\n",
    "        crec_ant.at[i, 'es_festivo_ano_anterior'] = datos_ano_ant['Es_Festivo']\n",
    "        \n",
    "        # es_finde año anterior\n",
    "        dia_semana_ant = datos_ano_ant['dia_semana']\n",
    "        if dia_semana_ant in ['sabado', 'domingo']:\n",
    "            crec_ant.at[i, 'es_finde_ano_anterior'] = 1\n",
    "        else:\n",
    "            crec_ant.at[i, 'es_finde_ano_anterior'] = 0\n",
    "\n",
    "nuevas = [\n",
    "    'normalizada_semana_anterior',\n",
    "    'nacida_ordinaria_semana_anterior',\n",
    "    'es_festivo_semana_anterior',\n",
    "    'es_finde_semana_anterior',\n",
    "    'normalizada_ano_anterior',\n",
    "    'nacida_ordinaria_ano_anterior',\n",
    "    'es_festivo_ano_anterior',\n",
    "    'es_finde_ano_anterior'\n",
    "]\n",
    "crec_ant[nuevas] = crec_ant[nuevas].fillna(0) #las rellenamos con ceros"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "1c1dd7ce-94a2-4adc-a198-aa3d2dc967ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Nos quedamos solamente con las columnas que necesitemos para poder cruzar\n",
    "guardar = ['fecha', 'normalizada_semana_anterior', 'nacida_ordinaria_semana_anterior','es_festivo_semana_anterior', 'es_finde_semana_anterior', 'normalizada_ano_anterior', 'nacida_ordinaria_ano_anterior', 'es_festivo_ano_anterior', 'es_finde_ano_anterior']\n",
    "crec_ant = crec_ant[guardar]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "cd8c8925-6df3-42c6-a546-e320629de6a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#ahora unimos los dos dfs \n",
    "df = df.merge(\n",
    "    crec_ant,\n",
    "    left_on='Fecha',\n",
    "    right_on='fecha',\n",
    "    how='left'\n",
    ")\n",
    "df.drop(columns='fecha', inplace=True)\n",
    "df.drop(columns=['Unidad', 'Codired', 'Dia'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "58f412fc-da1f-4ec3-bda6-b1a3da0d431b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df\n",
    "dfforecast.to_excel(\"forecast.xlsx\", index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9b8040c-c571-4d45-ad4d-16ba3e0fbd1e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
